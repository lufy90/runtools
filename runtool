#!/bin/bash
# filename: tools.sh
# Author: lufei
# Date: 20200109 15:57:53


## SETTINS
BASEURL=http://autoserver:8000/tools
RUNSLEEP=10
TESTFILES=testfiles
PATCHES=patches
DOCUMENTS=documents
RESULTS=results


installpkg(){
#	[ -z $PACKAGES ] && return 0
        local i
	local inst_ok
        echo "INFO: checking packages ..."
        for i
        do
                rpm -qi $i &> /dev/null || \
                        yum install $i -y &> /dev/null 
			if [ $? == 0 ]; then
				inst_ok="$instok $i"
			else
				echo "WARNING: yum install $i failed, related cases may return FAIL."
			fi
        done
	echo "PACKAGES=\"$inst_ok\"" >> $RESULTDIR/$TOOLNAME
}

get_tarball() {
	[ -f $TARBALL ] || \
	{
		echo "INFO: downloading $TARBALL ..."
		echo "INFO: wget $URL"
		wget $URL || \
		{
			echo "ERROR: wget $URL failed."
			exit 1
		}
	}
	echo "URL=$URL" >> $RESULTDIR/$TOOLNAME
	echo "TARBALL=$TARBALL" >>  $RESULTDIR/$TOOLNAME

	[ -f $TARBALL.$MD5SUFFIX ] || \
	{
		echo "INFO: downloading $TARBALL.$MD5SUFFIX"
		wget $URL.$MD5SUFFIX || \
                {
                        echo "WARN: wget $URL.$MD5SUFFIX failed"
                        echo "Cannot check $TARBALL"
			return 1
                }
	}
	local expect_md5=`cat $TARBALL.$MD5SUFFIX | cut -d " " -f 1`
	local actrual_md5=`md5sum $TARBALL | cut -d " " -f 1`
	echo "MD5=$actrual_md5" >> $RESULTDIR/$TOOLNAME
	[ $expect_md5 == $actrual_md5 ] || \
	{
		echo "WARN: $TARBALL has different MD5 than expected."
		echo "expect:  $expect_md5"
		echo "actrual: $actrual_md5"
		return 1
	}
	echo "INFO: $TARBALL downloaded."
}

is_sub_item() {
        local a=$1
        local b=$2
        for i in $b
        do
                [ $a == $i ] && return 0
        done
        return 1
}

install() {
        installpkg $PACKAGES
	[ -f $TARBALL ] || \
		get_tarball
	if [ x$TARGET != x ]; then
        	if [ -e $TARGET ] ; then
	        	echo "WARN: $TARGET already exist"
		        echo "Change target in $TOOLNAME test config file"
		        echo "Or stop install and use the already exit."
             		return 1
	        fi
	fi
	local tarball=$TARBALL
	local suffix=${tarball##*.}
	local arch=`arch`
	local folder=$FOLDER
	local cmd=$INSTALLCMD

	if (is_sub_item $suffix "tar gz bz2 xz tgz"); then
		tar xf $tarball
	elif (is_sub_item $suffix "zip"); then
		unzip $tarball
	else
		echo "WARN: unkown type: $tarball"
	#	return 1
	fi
	[ -z $PATCH ] || { 
		[ -f $PATCH ] && {
			patch -p0 < $PATCH
                	echo "PATCH=$PATCH" >> $RESULTDIR/$TOOLNAME
		}
	}

	echo "TARGET=$TARGET" >> $RESULTDIR/$TOOLNAME
	echo "INSTALLCMD=\"$cmd\"" >> $RESULTDIR/$TOOLNAME

	echo "INFO: install $TOOLNAME"
	echo "INFO: $cmd"
	eval "($cmd)" &> $RESULTDIR/${TOOLNAME}_install.log || \
	{
		echo "ERROR: $TOOLNAME install failed."
		echo "Check $RESULTDIR/${TOOLNAME}_install.log for details."
		exit 2
	}
}

runtest() {
	[ -e $TARGET ] || \
		install
	local times=$RUNTIME
	local t=

	eval $SCRIPT

	for t in `seq $times`
	do
		echo "INFO: ${TOOLNAME} test ($t/$times)"
		local prefix=RUNCMD
		local i=1
		local cmd=$prefix$i

		while [ "x${!cmd}" != "x" ]
		do
			echo "INFO: running cmd: ${!cmd}"
			# echo "$cmd=${!cmd}" >> $RESULTDIR/${TOOLNAME}
			sleep $RUNSLEEP
			eval "(${!cmd})" &>> $RESULTDIR/${TOOLNAME}_${cmd}.log
			i=$((i+1))
			cmd=$prefix$i
		done
	done

	echo "RUNTIME=$times" >> $RESULTDIR/$TOOLNAME

	local j=1
	while [ $j -lt $i ]
	do
		c=RUNCMD$j
		echo "RUNCMD$j=\"${!c}\"" >> $RESULTDIR/$TOOLNAME
		j=$((j+1))
	done
	echo "INFO: test run finished, check results at: $RESULTDIR"

: '	
	local oldifs=$IFS
	IFS=","
	local j=
	echo "INFO: run test"
	for j in $cmds
	do
		echo "INFO: running cmd is: $j"
		eval $j &> $RESULTDIR/${TOOLNAME}_.log
	done
	IFS=$oldifs
	
	'
}

runstress() {
	[ -e $TARGET ] || \
		install
	local cmd=$STRESSCMD
	echo "INFO: run stress"
	echo "INFO: $cmd"
	eval "($cmd)" &> $RESULTDIR/${TOOLNAME}_stress.log
}

run() {
	local op=$1
	shift
	local testfiles=$1
	[ x$testfiles != "x" ] || {
		echo "No testfile specified. "
	        return 4
	}

	for i in `echo $testfiles | tr "," " "`
	do
		[ -f $i ] || {
			i=$TESTFILES/$i
	        }
		source $i || {
			echo "ERROR: failed to import $i"
			exit 3
		}
		echo "INFO: $op $i"
		local date_end=`date +%Y_%m_%d_%Hh_%M_%S`
		RESULTDIR=$RESULTS/${RESULT:-$TOOLNAME}_$date_end
		mkdir -p $RESULTDIR
		echo "# RESULTDIR=$RESULTDIR" >> $RESULTDIR/${TOOLNAME}
		echo "TOOLNAME=$TOOLNAME" >> $RESULTDIR/${TOOLNAME}
		[ -d $RESULTDIR ] || \
		{
			echo "ERROR: failed to create $RESULTDIR"
			exit 1
		}
		$op $@
	done
}

gentest() {
	[ x$1 == "x" ] && {
		echo "Please specify testfile name."
		exit 1;
	}
	local testfile=$TESTFILES/$1
	[ ! -f $testfile ] || \
	{
		echo "ERROR: $testfile already exists."
		exit 1
	}
	cat > $testfile << eof
# name: `basename $testfile`
# date: `date`
#
# This file is generated by $0
# You should edit this file before run the test.

TESTNAME=`basename $testfile`
# packages need to be install before installation
PACKAGES=""
# base url of tarball
BASEURL=$BASEURL
## test tool 
# test official site
SITE=
TOOLNAME=
VERSION=
TARBALL=
MD5SUFFIX=md5
URL=\$BASEURL/\$TARBALL
# folder after untar
FOLDER=\${TARBALL%%.*}
# patch file, diff -ruN old new> \${TOOLNAME}.patch
PATCH=\$PATCHES/\${TESTNAME}.patch
# install destination
TARGET=/opt/\${TOOLNAME}\${VERSION}
## test configurations
# any script before running test.
SCRIPT=""
INSTALLCMD=
# sleep time in seconds before run test.
RUNSLEEP=$RUNSLEEP
# test loop times.
RUNTIME=1
RESULT=
# RUNCMD would be expanded with increasing suffix.
RUNCMD1=

# stress for running command cycally until specific time.
STRESSCMD=
eof
	echo "Testfile generated: $testfile."
	echo "Please specify variables in testfile before running test."
}

usage() {
	cat << eof
USAGE: $0 <option> <testfile> [<testfile1> ...] 

OPTIONS:
    get        get test tarball
    install    install test
    run        run test
    stress     run stress test
    gentest    generate test file
    gendoc     generate test document
    genrep     generate test report with given result directory
    help       show usage

TESTFILE:
    Particular file for define the test.
    The basic formart can be generated by:

        $0 generate <filename>

eof
}

# generate document of test
gendoc() {
	docname=${DOCUMENT-$TESTNAME.md}
	doc=$DOCUMENTS/$docname
	[ -d $DOCUMENTS ] || mkdir $DOCUMENTS
	cat > $doc << eof
## Before Install
\`\`\`
yum install -y $PACKAGES
\`\`\`

## Installation
\`\`\`
`echo $INSTALLCMD | tr ";" "\n"`
\`\`\`

## Before Run
\`\`\`
`echo $SCRIPT | tr ";" "\n"`
\`\`\`

## Running test
\`\`\`
`echo $RUNCMD1 | tr ";" "\n"`
\`\`\`
eof
        echo "PACKAGES=$PACKAGES" >> $RESULTDIR/$TOOLNAME
	echo "INSTALLCMD=$INSTALLCMD" >> $RESULTDIR/$TOOLNAME
	echo "RUNCMD1=$RUNCMD1" >> $RESULTDIR/$TOOLNAME
	echo "SCRIPT=$SCRIPT" >> $RESULTDIR/$TOOLNAME
	echo "Document generated: $doc"
}

# generate report
genrep() {
	:
}

main(){
	local option=$1
	shift
        case $option in
                "install")
			run install $@ ;;
                "run")
			run runtest $@ ;;
                "stress")			
                        run runstress $@ ;;
		"get")
			run get_tarball $@ ;;
		"gentest")
			gentest $@ ;;
		"gendoc")
			run gendoc $@ ;;
		"genrep")
			genrep $@ ;;
                ""|* )
                        usage ;;
        esac
}


if [ $0 == "./runtool" ] ; then
	main $@
fi
